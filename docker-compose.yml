version: '3.8'

networks:
  scc_network:
    driver: bridge

volumes:
  postgres_data:

services:
  # Anvil node for local blockchain development
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    entrypoint: ["/bin/sh", "-c"]
    command: ["anvil --host 0.0.0.0"]
    ports:
      - "8545:8545"
    networks:
      - scc_network
    healthcheck:
      # Use `cast` to check if the anvil RPC is responsive.
      test: ["CMD", "cast", "chain-id", "--rpc-url", "http://localhost:8545"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Off-chain keeper bot
  keeper:
    build:
      context: .
      dockerfile: offchain/Dockerfile
    env_file:
      - offchain/.env
    environment:
      # This RPC_URL points to the anvil service over Docker's internal network
      - RPC_URL=http://anvil:8545
      # The metrics port is exposed to the host
      - METRICS_PORT=9091
    ports:
      - "9091:9091"
    networks:
      - scc_network
    depends_on:
      anvil:
        condition: service_healthy
    # Ensures the keeper restarts if it fails
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - scc_network
    depends_on:
      - keeper

  # Subgraph services
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: password
      POSTGRES_DB: graph-node
    ports:
      - "5434:5432"
    networks:
      - scc_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U graph-node -d graph-node"]
      interval: 5s
      timeout: 5s
      retries: 10

  ipfs:
    image: ipfs/go-ipfs:v0.20.0
    ports:
      - "5001:5001" # API
      - "8080:8080" # Gateway
    networks:
      - scc_network
    healthcheck:
      test: ["CMD", "ipfs", "cat", "/ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme"]
      interval: 10s
      timeout: 10s
      retries: 5

  graph-node:
    image: graphprotocol/graph-node:v0.33.0
    ports:
      - "8020:8020" # JSON-RPC
      - "8000:8000" # GraphQL
      - "8001:8001" # Admin
    networks:
      - scc_network
    depends_on:
      postgres:
        condition: service_healthy
      ipfs:
        condition: service_healthy
      anvil:
        condition: service_healthy
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: password
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: 'anvil:http://anvil:8545'
