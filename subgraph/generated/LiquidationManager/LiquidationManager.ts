// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AuctionBought extends ethereum.Event {
  get params(): AuctionBought__Params {
    return new AuctionBought__Params(this);
  }
}

export class AuctionBought__Params {
  _event: AuctionBought;

  constructor(event: AuctionBought) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralBought(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debtPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AuctionClosed extends ethereum.Event {
  get params(): AuctionClosed__Params {
    return new AuctionClosed__Params(this);
  }
}

export class AuctionClosed__Params {
  _event: AuctionClosed;

  constructor(event: AuctionClosed) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AuctionStarted extends ethereum.Event {
  get params(): AuctionStarted__Params {
    return new AuctionStarted__Params(this);
  }
}

export class AuctionStarted__Params {
  _event: AuctionStarted;

  constructor(event: AuctionStarted) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debtToCover(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LiquidationManager__auctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getCollateralAmount(): BigInt {
    return this.value0;
  }

  getDebtToCover(): BigInt {
    return this.value1;
  }

  getVaultAddress(): Address {
    return this.value2;
  }

  getStartTime(): BigInt {
    return this.value3;
  }

  getStartPrice(): BigInt {
    return this.value4;
  }
}

export class LiquidationManager extends ethereum.SmartContract {
  static bind(address: Address): LiquidationManager {
    return new LiquidationManager("LiquidationManager", address);
  }

  DEBT_DUST(): BigInt {
    let result = super.call("DEBT_DUST", "DEBT_DUST():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DEBT_DUST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DEBT_DUST", "DEBT_DUST():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_DECAY_HALFLIFE(): BigInt {
    let result = super.call(
      "PRICE_DECAY_HALFLIFE",
      "PRICE_DECAY_HALFLIFE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_PRICE_DECAY_HALFLIFE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_DECAY_HALFLIFE",
      "PRICE_DECAY_HALFLIFE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  START_PRICE_MULTIPLIER(): BigInt {
    let result = super.call(
      "START_PRICE_MULTIPLIER",
      "START_PRICE_MULTIPLIER():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_START_PRICE_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "START_PRICE_MULTIPLIER",
      "START_PRICE_MULTIPLIER():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionIdCounter(): BigInt {
    let result = super.call(
      "auctionIdCounter",
      "auctionIdCounter():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_auctionIdCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionIdCounter",
      "auctionIdCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctions(param0: BigInt): LiquidationManager__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(uint256,uint256,address,uint96,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LiquidationManager__auctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_auctions(
    param0: BigInt,
  ): ethereum.CallResult<LiquidationManager__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(uint256,uint256,address,uint96,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquidationManager__auctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  getCurrentPrice(_auctionId: BigInt): BigInt {
    let result = super.call(
      "getCurrentPrice",
      "getCurrentPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)],
    );

    return result[0].toBigInt();
  }

  try_getCurrentPrice(_auctionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPrice",
      "getCurrentPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sccUsdToken(): Address {
    let result = super.call("sccUsdToken", "sccUsdToken():(address)", []);

    return result[0].toAddress();
  }

  try_sccUsdToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("sccUsdToken", "sccUsdToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultToAuctionId(param0: Address): BigInt {
    let result = super.call(
      "vaultToAuctionId",
      "vaultToAuctionId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_vaultToAuctionId(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultToAuctionId",
      "vaultToAuctionId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _sccUsdToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collateralToBuy(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get _vaultAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
