// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get_in_block("Protocol", id));
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalVaults(): BigInt {
    let value = this.get("totalVaults");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVaults(value: BigInt) {
    this.set("totalVaults", Value.fromBigInt(value));
  }

  get totalCollateralValueUSD(): BigDecimal {
    let value = this.get("totalCollateralValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalCollateralValueUSD(value: BigDecimal) {
    this.set("totalCollateralValueUSD", Value.fromBigDecimal(value));
  }

  get totalDebtUSD(): BigDecimal {
    let value = this.get("totalDebtUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDebtUSD(value: BigDecimal) {
    this.set("totalDebtUSD", Value.fromBigDecimal(value));
  }

  get activeAuctions(): BigInt {
    let value = this.get("activeAuctions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeAuctions(value: BigInt) {
    this.set("activeAuctions", Value.fromBigInt(value));
  }

  get totalStakedGOV(): BigDecimal {
    let value = this.get("totalStakedGOV");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalStakedGOV(value: BigDecimal) {
    this.set("totalStakedGOV", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get vaults(): Array<string> {
    let value = this.get("vaults");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set vaults(value: Array<string>) {
    this.set("vaults", Value.fromStringArray(value));
  }
}

export class TokenPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenPrice", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenPrice | null {
    return changetype<TokenPrice | null>(store.get_in_block("TokenPrice", id));
  }

  static load(id: string): TokenPrice | null {
    return changetype<TokenPrice | null>(store.get("TokenPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get lastUpdateBlockNumber(): BigInt {
    let value = this.get("lastUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateBlockNumber(value: BigInt) {
    this.set("lastUpdateBlockNumber", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaults(): VaultLoader {
    return new VaultLoader("User", this.get("id")!.toString(), "vaults");
  }

  get stakingPosition(): string | null {
    let value = this.get("stakingPosition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakingPosition(value: string | null) {
    if (!value) {
      this.unset("stakingPosition");
    } else {
      this.set("stakingPosition", Value.fromString(<string>value));
    }
  }

  get votes(): VoteLoader {
    return new VoteLoader("User", this.get("id")!.toString(), "votes");
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vault | null {
    return changetype<Vault | null>(store.get_in_block("Vault", id));
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get collateralAmount(): BigDecimal {
    let value = this.get("collateralAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralAmount(value: BigDecimal) {
    this.set("collateralAmount", Value.fromBigDecimal(value));
  }

  get collateralValueUSD(): BigDecimal {
    let value = this.get("collateralValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralValueUSD(value: BigDecimal) {
    this.set("collateralValueUSD", Value.fromBigDecimal(value));
  }

  get debtAmount(): BigDecimal {
    let value = this.get("debtAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set debtAmount(value: BigDecimal) {
    this.set("debtAmount", Value.fromBigDecimal(value));
  }

  get debtValueUSD(): BigDecimal {
    let value = this.get("debtValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set debtValueUSD(value: BigDecimal) {
    this.set("debtValueUSD", Value.fromBigDecimal(value));
  }

  get collateralizationRatio(): BigDecimal {
    let value = this.get("collateralizationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralizationRatio(value: BigDecimal) {
    this.set("collateralizationRatio", Value.fromBigDecimal(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get updates(): VaultUpdateLoader {
    return new VaultUpdateLoader(
      "Vault",
      this.get("id")!.toString(),
      "updates",
    );
  }

  get liquidationAuction(): string | null {
    let value = this.get("liquidationAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidationAuction(value: string | null) {
    if (!value) {
      this.unset("liquidationAuction");
    } else {
      this.set("liquidationAuction", Value.fromString(<string>value));
    }
  }
}

export class VaultUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VaultUpdate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VaultUpdate | null {
    return changetype<VaultUpdate | null>(
      store.get_in_block("VaultUpdate", id),
    );
  }

  static load(id: string): VaultUpdate | null {
    return changetype<VaultUpdate | null>(store.get("VaultUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LiquidationAuction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidationAuction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidationAuction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LiquidationAuction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiquidationAuction | null {
    return changetype<LiquidationAuction | null>(
      store.get_in_block("LiquidationAuction", id),
    );
  }

  static load(id: string): LiquidationAuction | null {
    return changetype<LiquidationAuction | null>(
      store.get("LiquidationAuction", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get collateralAmount(): BigDecimal {
    let value = this.get("collateralAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralAmount(value: BigDecimal) {
    this.set("collateralAmount", Value.fromBigDecimal(value));
  }

  get debtToCover(): BigDecimal {
    let value = this.get("debtToCover");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set debtToCover(value: BigDecimal) {
    this.set("debtToCover", Value.fromBigDecimal(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get startPrice(): BigDecimal {
    let value = this.get("startPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set startPrice(value: BigDecimal) {
    this.set("startPrice", Value.fromBigDecimal(value));
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(<string>value));
    }
  }

  get collateralBought(): BigDecimal | null {
    let value = this.get("collateralBought");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralBought(value: BigDecimal | null) {
    if (!value) {
      this.unset("collateralBought");
    } else {
      this.set("collateralBought", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get debtPaid(): BigDecimal | null {
    let value = this.get("debtPaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set debtPaid(value: BigDecimal | null) {
    if (!value) {
      this.unset("debtPaid");
    } else {
      this.set("debtPaid", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get closedAtTimestamp(): BigInt | null {
    let value = this.get("closedAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedAtTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("closedAtTimestamp");
    } else {
      this.set("closedAtTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class StakingPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakingPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StakingPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StakingPosition | null {
    return changetype<StakingPosition | null>(
      store.get_in_block("StakingPosition", id),
    );
  }

  static load(id: string): StakingPosition | null {
    return changetype<StakingPosition | null>(store.get("StakingPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amountStaked(): BigDecimal {
    let value = this.get("amountStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountStaked(value: BigDecimal) {
    this.set("amountStaked", Value.fromBigDecimal(value));
  }

  get rewardsClaimed(): BigDecimal {
    let value = this.get("rewardsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rewardsClaimed(value: BigDecimal) {
    this.set("rewardsClaimed", Value.fromBigDecimal(value));
  }

  get rewardEvents(): RewardEventLoader {
    return new RewardEventLoader(
      "StakingPosition",
      this.get("id")!.toString(),
      "rewardEvents",
    );
  }
}

export class RewardEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RewardEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardEvent | null {
    return changetype<RewardEvent | null>(
      store.get_in_block("RewardEvent", id),
    );
  }

  static load(id: string): RewardEvent | null {
    return changetype<RewardEvent | null>(store.get("RewardEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakingPosition(): string {
    let value = this.get("stakingPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set stakingPosition(value: string) {
    this.set("stakingPosition", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class GovernanceProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GovernanceProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GovernanceProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GovernanceProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GovernanceProposal | null {
    return changetype<GovernanceProposal | null>(
      store.get_in_block("GovernanceProposal", id),
    );
  }

  static load(id: string): GovernanceProposal | null {
    return changetype<GovernanceProposal | null>(
      store.get("GovernanceProposal", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get targets(): Array<Bytes> {
    let value = this.get("targets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set targets(value: Array<Bytes>) {
    this.set("targets", Value.fromBytesArray(value));
  }

  get values(): Array<BigInt> {
    let value = this.get("values");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt>) {
    this.set("values", Value.fromBigIntArray(value));
  }

  get calldatas(): Array<Bytes> {
    let value = this.get("calldatas");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set calldatas(value: Array<Bytes>) {
    this.set("calldatas", Value.fromBytesArray(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get forVotes(): BigInt {
    let value = this.get("forVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set forVotes(value: BigInt) {
    this.set("forVotes", Value.fromBigInt(value));
  }

  get againstVotes(): BigInt {
    let value = this.get("againstVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set againstVotes(value: BigInt) {
    this.set("againstVotes", Value.fromBigInt(value));
  }

  get abstainVotes(): BigInt {
    let value = this.get("abstainVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set abstainVotes(value: BigInt) {
    this.set("abstainVotes", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get executedAtTimestamp(): BigInt | null {
    let value = this.get("executedAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedAtTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("executedAtTimestamp");
    } else {
      this.set("executedAtTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledAtTimestamp(): BigInt | null {
    let value = this.get("canceledAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledAtTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("canceledAtTimestamp");
    } else {
      this.set("canceledAtTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get votes(): VoteLoader {
    return new VoteLoader(
      "GovernanceProposal",
      this.get("id")!.toString(),
      "votes",
    );
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vote | null {
    return changetype<Vote | null>(store.get_in_block("Vote", id));
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get support(): string {
    let value = this.get("support");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set support(value: string) {
    this.set("support", Value.fromString(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get reason(): string | null {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reason(value: string | null) {
    if (!value) {
      this.unset("reason");
    } else {
      this.set("reason", Value.fromString(<string>value));
    }
  }
}

export class VaultLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Vault[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Vault[]>(value);
  }
}

export class VoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Vote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Vote[]>(value);
  }
}

export class VaultUpdateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): VaultUpdate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<VaultUpdate[]>(value);
  }
}

export class RewardEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RewardEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RewardEvent[]>(value);
  }
}
